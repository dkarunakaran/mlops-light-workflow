name: Python application test with Github Actions

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        make install
    - name: Lint with pylint
      run: |
        make lint
    #- name: Test with pytest
    #  run: |
    #    make test
    #- name: Format code
    #  run: |
    #    make format
  deploy:
    runs-on: ubuntu-latest #run this workflow on ubuntu instance
    permissions: #make sure we add permission to read and write package
      contents: read
      packages: write

    steps:
    - name: Login to GCR
      env:
        PROJECT_ID: t-isotope-421803 #create env called PROJECT_ID consisted of our actual GCP Project ID
      uses: google-github-actions/setup-gcloud@v0.3.0 #checkouts GCR repo, so this workflow can access it
      with:
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }} #parse the value of repository secret called SERVICE_ACCOUNT_KEY that we have created earlier
        project_id: ${{ env.PROJECT_ID }} #parse the value of env called PROJECT_ID
        export_default_credentials: true

    #- name: Build Docker Image
    #  env:
    #    IMAGE_NAME: mlops_flask_actions_gke #create env called IMAGE_NAME consisted of actual name of Docker Image after we build
    #    PROJECT_ID: t-isotope-421803
    #  run: docker build -t $IMAGE_NAME:latest . #build the docker image

    - name: Configure Docker Client
      run:  |-
        gcloud auth configure-docker --quiet #authenticate to gcr

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: flask_actions_cloud_build_gke_app:latest
    
    
        
    #- name: Push Docker Image to Container Registry GCR
    #  env: 
    #    IMAGE_NAME: mlops_flask_actions_gke
    #    PROJECT_ID: t-isotope-421803
    #    #tag docker image to gcr image format then push to gcr
    #  run: |-
    #    docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 
    #    docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 


